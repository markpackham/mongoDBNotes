db.createUser({
user:"admin",
pwd:"admin",
roles:["readWrite","dbAdmin"]
});



/////////////////
> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB

Use & Create DB
> use mycustomers
switched to db mycustomers
> db
mycustomers

Create User
> db.createUser({
... user:"admin",
... pwd:"admin",
... roles:["readWrite","dbAdmin"]
... });
Successfully added user: { "user" : "admin", "roles" : [ "readWrite", "dbAdmin" ] }

Create & Show Collection
> db.createCollection('customers');
{ "ok" : 1 }
> show collections
customers

Insert Users
> db.customers.insert({first_name:"John",last_name:"Smith"});
WriteResult({ "nInserted" : 1 })
> db.customers.find();
{ "_id" : ObjectId("5d1a0bdd78f204cac0af5294"), "first_name" : "John", "last_name" : "Smith" }
> db.customers.insert([{first_name:"Jim",last_name:"Smith"},{first_name:"Joe",last_name:"Smythington",gender:"male"}]);
BulkWriteResult({
        "writeErrors" : [ ],
        "writeConcernErrors" : [ ],
        "nInserted" : 2,
        "nUpserted" : 0,
        "nMatched" : 0,
        "nModified" : 0,
        "nRemoved" : 0,
        "upserted" : [ ]
})

Find aka Select
> db.customers.find();
{ "_id" : ObjectId("5d1a0bdd78f204cac0af5294"), "first_name" : "John", "last_name" : "Smith" }
{ "_id" : ObjectId("5d1a0d2278f204cac0af5295"), "first_name" : "Jim", "last_name" : "Smith" }
{ "_id" : ObjectId("5d1a0d2278f204cac0af5296"), "first_name" : "Joe", "last_name" : "Smythington", "gender" : "male" }
> db.customers.find().pretty();
{
        "_id" : ObjectId("5d1a0bdd78f204cac0af5294"),
        "first_name" : "John",
        "last_name" : "Smith"
}
{
        "_id" : ObjectId("5d1a0d2278f204cac0af5295"),
        "first_name" : "Jim",
        "last_name" : "Smith"
}
{
        "_id" : ObjectId("5d1a0d2278f204cac0af5296"),
        "first_name" : "Joe",
        "last_name" : "Smythington",
        "gender" : "male"
}

Update
> db.customers.update({first_name:"John"},{first_name:"Jojo",last_name:"Platinum",gender:"male"});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty();
{
        "_id" : ObjectId("5d1a0bdd78f204cac0af5294"),
        "first_name" : "Jojo",
        "last_name" : "Platinum",
        "gender" : "male"
}
{
        "_id" : ObjectId("5d1a0d2278f204cac0af5295"),
        "first_name" : "Jim",
        "last_name" : "Smith"
}
{
        "_id" : ObjectId("5d1a0d2278f204cac0af5296"),
        "first_name" : "Joe",
        "last_name" : "Smythington",
        "gender" : "male"
}

Update & Set (use Set to avoid having to type every single field out when doing an update)
> db.customers.update({first_name:"Jim"},{$set:{gender:"male"}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty();
{
        "_id" : ObjectId("5d1a0bdd78f204cac0af5294"),
        "first_name" : "Jojo",
        "last_name" : "Platinum",
        "gender" : "male"
}
{
        "_id" : ObjectId("5d1a0d2278f204cac0af5295"),
        "first_name" : "Jim",
        "last_name" : "Smith",
        "gender" : "male"
}
{
        "_id" : ObjectId("5d1a0d2278f204cac0af5296"),
        "first_name" : "Joe",
        "last_name" : "Smythington",
        "gender" : "male"
}

Set
> db.customers.update({first_name:"Jim"},{$set:{age:89}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

Increament Value (so increase age by 10)
> db.customers.update({first_name:"Jim"},{$inc:{age:10}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty();
{
        "_id" : ObjectId("5d1a0bdd78f204cac0af5294"),
        "first_name" : "Jojo",
        "last_name" : "Platinum",
        "gender" : "male"
}
{
        "_id" : ObjectId("5d1a0d2278f204cac0af5295"),
        "first_name" : "Jim",
        "last_name" : "Smith",
        "gender" : "male",
        "age" : 99
}
{
        "_id" : ObjectId("5d1a0d2278f204cac0af5296"),
        "first_name" : "Joe",
        "last_name" : "Smythington",
        "gender" : "male"
}

Remove / Unset field
> db.customers.update({first_name:"Jim"},{$unset:{age:1}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customers.find().pretty();
{
        "_id" : ObjectId("5d1a0bdd78f204cac0af5294"),
        "first_name" : "Jojo",
        "last_name" : "Platinum",
        "gender" : "male"
}
{
        "_id" : ObjectId("5d1a0d2278f204cac0af5295"),
        "first_name" : "Jim",
        "last_name" : "Smith",
        "gender" : "male"
}
{
        "_id" : ObjectId("5d1a0d2278f204cac0af5296"),
        "first_name" : "Joe",
        "last_name" : "Smythington",
        "gender" : "male"
}


Update Insert (insert if doesn't already exist)
> db.customers.update({first_name:"Mary"},{first_name:"Mary",last_name:"Lamb"},{upsert:true});
WriteResult({
        "nMatched" : 0,
        "nUpserted" : 1,
        "nModified" : 0,
        "_id" : ObjectId("5d1a139bf5e50d5ef2224874")
})

Rename
> db.customers.update({first_name:"Jim"},{$rename:{"gender":"sex"}});
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

Pretty Results
> db.customers.find().pretty();
{
        "_id" : ObjectId("5d1a0bdd78f204cac0af5294"),
        "first_name" : "Jojo",
        "last_name" : "Platinum",
        "gender" : "male"
}
{
        "_id" : ObjectId("5d1a0d2278f204cac0af5295"),
        "first_name" : "Jim",
        "last_name" : "Smith",
        "sex" : "male"
}
{
        "_id" : ObjectId("5d1a0d2278f204cac0af5296"),
        "first_name" : "Joe",
        "last_name" : "Smythington",
        "gender" : "male"
}
{
        "_id" : ObjectId("5d1a139bf5e50d5ef2224874"),
        "first_name" : "Mary",
        "last_name" : "Lamb"
}

Remove Record
> db.customers.remove({first_name:"Mary"});
WriteResult({ "nRemoved" : 1 })

Find using Or
> db.customers.find({$or:[{first_name:"Jim"},{first_name:"Joe"}]});
{ "_id" : ObjectId("5d1a0d2278f204cac0af5295"), "first_name" : "Jim", "last_name" : "Smith", "sex" : "male" }
{ "_id" : ObjectId("5d1a0d2278f204cac0af5296"), "first_name" : "Joe", "last_name" : "Smythington", "gender" : "male" }

Find Less Than, Great Than or Equal To number
> db.customers.find({age:{$lt:70}});
> db.customers.find({age:{$gt:70}});
> db.customers.find({age:{$gte:70}});
> db.customers.find({age:{$lte:70}});

Sort Asc
> db.customers.find().sort({last_name:1});
{ "_id" : ObjectId("5d1a0bdd78f204cac0af5294"), "first_name" : "Jojo", "last_name" : "Platinum", "gender" : "male" }
{ "_id" : ObjectId("5d1a0d2278f204cac0af5295"), "first_name" : "Jim", "last_name" : "Smith", "sex" : "male" }
{ "_id" : ObjectId("5d1a0d2278f204cac0af5296"), "first_name" : "Joe", "last_name" : "Smythington", "gender" : "male" }

Sort Desc
> db.customers.find().sort({last_name:-1});
{ "_id" : ObjectId("5d1a0d2278f204cac0af5296"), "first_name" : "Joe", "last_name" : "Smythington", "gender" : "male" }
{ "_id" : ObjectId("5d1a0d2278f204cac0af5295"), "first_name" : "Jim", "last_name" : "Smith", "sex" : "male" }
{ "_id" : ObjectId("5d1a0bdd78f204cac0af5294"), "first_name" : "Jojo", "last_name" : "Platinum", "gender" : "male" }

Count
> db.customers.find().count();
3
> db.customers.find({gender:"male"}).count();
2

Limit
> db.customers.find().limit(2);
{ "_id" : ObjectId("5d1a0bdd78f204cac0af5294"), "first_name" : "Jojo", "last_name" : "Platinum", "gender" : "male" }
{ "_id" : ObjectId("5d1a0d2278f204cac0af5295"), "first_name" : "Jim", "last_name" : "Smith", "sex" : "male" }

Find & Limit & Sort
> db.customers.find().limit(2).sort({last_name:-1});
{ "_id" : ObjectId("5d1a0d2278f204cac0af5296"), "first_name" : "Joe", "last_name" : "Smythington", "gender" : "male" }
{ "_id" : ObjectId("5d1a0d2278f204cac0af5295"), "first_name" : "Jim", "last_name" : "Smith", "sex" : "male" }

forEach print
> db.customers.find().forEach(function(doc){print("Customer Name: "+doc.first_name)});
Customer Name: Jojo
Customer Name: Jim
Customer Name: Joe
>  